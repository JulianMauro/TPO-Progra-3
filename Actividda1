public class FloydWarshall {
    static final int INF = 99999;

    public FloydWarshall() {}

    public static void main(String[] args) {
        FloydWarshall fw = new FloydWarshall();
        int[][] graph = new int[][] {
                {0, 2, INF, 5},
                {INF, 0, INF, 4},
                {INF, INF, 0, INF},
                {INF, INF, 2, 0}
        };

        int V = graph.length;
        fw.floydWarshall(graph, V);
    }

    void floydWarshall(int[][] graph, int V) {
        int[][] dist = new int[V][V];

        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                dist[i][j] = graph[i][j];
            }
        }
        for (int k = 0; k < V; k++) {
            for (int i = 0; i < V; i++) {
                for (int j = 0; j < V; j++) {
                    if (dist[i][k] + dist[k][j] < dist[i][j]) {
                        dist[i][j] = dist[i][k] + dist[k][j];
                    }
                }
            }
        }
        printSolution(dist, V);
    }

    void printSolution(int[][] dist, int V) {
        System.out.println("Matriz de distancias más cortas entre cada par de vértices:");

        System.out.print("    ");  // Space for row header
        for (int i = 0; i < V; i++) {
            System.out.print("N" + (i + 1) + "  ");
        }
        System.out.println();
        for (int i = 0; i < V; i++) {
            System.out.print("N" + (i + 1) + "  ");
            for (int j = 0; j < V; j++) {
                if (dist[i][j] == INF) {
                    System.out.print("INF ");
                } else {
                    System.out.print(dist[i][j] + "   ");
                }
            }
            System.out.println();
        }
    }
}
